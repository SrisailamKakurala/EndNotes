import { NextResponse } from "next/server";
import { genAI } from "../openai.config";



export async function POST(req: Request) {
  try {
    const { userPrompt, systemPrompt } = await req.json();

    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
    });

    const chatSession = model.startChat({
      generationConfig: {
        temperature: 1,
        topP: 0.95,
        topK: 64,
        maxOutputTokens: 65536,
      },
      history: [
        {
          role: "user",
          parts: [
            {text: "The user wants a roadmap for learning ReactJS, from basic to advanced.\nThe output should be a JSON object with two keys: \"readme\" and \"roadmapjson\".\n\"readme\" should contain the roadmap in Markdown format.\n\"roadmapjson\" should contain the roadmap in a structured JSON format, suitable for generating further notes.\n\n**Roadmap Structure Plan:**\n\n1.  **Fundamentals:**\n    *   HTML, CSS, JavaScript Basics (Prerequisites)\n    *   Modern JavaScript (ES6+)\n    *   What is React? (Library vs Framework)\n    *   Setting up a React Environment (Node.js, npm/yarn, Create React App)\n    *   JSX (Syntax, Expressions, Attributes)\n    *   Rendering Elements\n    *   Components (Functional vs Class - focus on Functional)\n    *   Props (Passing data down)\n    *   State (Managing component data - `useState` hook)\n    *   Lifecycle Methods (Conceptual understanding, focus on Hooks like `useEffect`)\n    *   Handling Events\n    *   Conditional Rendering\n    *   Lists and Keys\n\n2.  **Intermediate React:**\n    *   Hooks Deep Dive (`useState`, `useEffect`, `useContext`, `useReducer`, `useCallback`, `useMemo`, `useRef`, Custom Hooks)\n    *   Forms (Controlled vs Uncontrolled Components)\n    *   Styling in React (CSS Modules, Styled Components, Tailwind CSS, Inline Styles)\n    *   Routing (React Router - Setup, Basic Routing, Nested Routes, Dynamic Routes, Route Parameters, Programmatic Navigation)\n    *   State Management (Context API, Redux/Redux Toolkit, Zustand, Jotai - Overview and one deep dive, maybe Redux Toolkit)\n    *   Making API Calls (Fetch API, Axios, Handling Loading/Error States, `useEffect` for fetching)\n    *   Component Composition Patterns (Higher-Order Components - HOCs, Render Props - less common now, focus on Hooks)\n    *   Error Boundaries\n\n3.  **Advanced React:**\n    *   Performance Optimization (Memoization - `React.memo`, `useCallback`, `useMemo`, Code Splitting - `React.lazy` and Suspense, Virtual DOM Deep Dive, Profiling React Apps)\n    *   Testing (Unit Testing - Jest/React Testing Library, Integration Testing, End-to-End Testing - Cypress/Playwright - brief mention)\n    *   Server-Side Rendering (SSR) & Static Site Generation (SSG) (Next.js, Remix - overview and concepts)\n    *   Accessibility (ARIA attributes, Semantic HTML)\n    *   React Fiber (Conceptual understanding of the reconciliation algorithm)\n    *   Advanced Patterns (Compound Components, State Machines - XState)\n    *   TypeScript with React\n    *   Build Tools & Configuration (Webpack, Babel - understanding CRA's internals)\n    *   Contributing to Open Source / React Ecosystem\n\n**JSON Structure Plan (`roadmapjson`):**\n\n```json\n{\n  \"phase1\": {\n    \"name\": \"React Fundamentals\",\n    \"description\": \"Core concepts required to start building with React.\",\n    \"subPhases\": {\n      \"subPhase1\": { \"name\": \"Prerequisites\", \"description\": \"Essential web development basics (HTML, CSS, JS).\" },\n      \"subPhase2\": { \"name\": \"Modern JavaScript (ES6+)\", \"description\": \"Key JavaScript features used heavily in React.\" },\n      \"subPhase3\": { \"name\": \"Introduction to React\", \"description\": \"What React is, its philosophy, and setting up the environment.\" },\n      \"subPhase4\": { \"name\": \"JSX\", \"description\": \"Understanding JavaScript XML syntax extension.\" },\n      \"subPhase5\": { \"name\": \"Rendering and Components\", \"description\": \"Displaying elements and building reusable UI pieces.\" },\n      \"subPhase6\": { \"name\": \"Props and State\", \"description\": \"Managing data flow and component state (using useState).\" },\n      \"subPhase7\": { \"name\": \"Handling Events\", \"description\": \"Making components interactive.\" },\n      \"subPhase8\": { \"name\": \"Conditional Rendering\", \"description\": \"Displaying UI based on conditions.\" },\n      \"subPhase9\": { \"name\": \"Lists and Keys\", \"description\": \"Rendering dynamic lists efficiently.\" },\n      \"subPhase10\": { \"name\": \"Basic Hooks Introduction\", \"description\": \"Initial exposure to useState and useEffect.\" }\n    }\n  },\n  \"phase2\": {\n    \"name\": \"Intermediate React\",\n    \"description\": \"Deeper dive into React's capabilities and common patterns.\",\n    \"subPhases\": {\n      \"subPhase1\": { \"name\": \"Hooks Deep Dive\", \"description\": \"Mastering various built-in hooks (useContext, useReducer, etc.) and creating custom hooks.\" },\n      \"subPhase2\": { \"name\": \"Forms in React\", \"description\": \"Handling user input effectively.\" },\n      \"subPhase3\": { \"name\": \"Styling Strategies\", \"description\": \"Exploring different ways to style React components.\" },\n      \"subPhase4\": { \"name\": \"Client-Side Routing\", \"description\": \"Implementing navigation within a Single Page Application (SPA) using React Router.\" },\n      \"subPhase5\": { \"name\": \"State Management Solutions\", \"description\": \"Managing application-wide state beyond basic props/state (Context API, Redux Toolkit/Zustand).\" },\n      \"subPhase6\": { \"name\": \"Working with APIs\", \"description\": \"Fetching and handling data from external sources.\" },\n      \"subPhase7\": { \"name\": \"Component Composition\", \"description\": \"Advanced patterns for structuring components.\" },\n      \"subPhase8\": { \"name\": \"Error Handling\", \"description\": \"Gracefully managing errors with Error Boundaries.\" }\n    }\n  },\n  \"phase3\": {\n    \"name\": \"Advanced React & Ecosystem\",\n    \"description\": \"Optimizing performance, testing, and exploring the broader React ecosystem.\",\n    \"subPhases\": {\n      \"subPhase1\": { \"name\": \"Performance Optimization\", \"description\": \"Techniques to make React applications faster (Memoization, Code Splitting).\" },\n      \"subPhase2\": { \"name\": \"Testing React Applications\", \"description\": \"Ensuring code quality and reliability (Unit, Integration).\" },\n      \"subPhase3\": { \"name\": \"SSR & SSG Frameworks\", \"description\": \"Understanding server-side rendering and static site generation with frameworks like Next.js.\" },\n      \"subPhase4\": { \"name\": \"Accessibility (a11y)\", \"description\": \"Building inclusive applications accessible to everyone.\" },\n      \"subPhase5\": { \"name\": \"TypeScript with React\", \"description\": \"Adding static typing for robustness and maintainability.\" },\n      \"subPhase6\": { \"name\": \"Advanced Patterns & Concepts\", \"description\": \"Exploring patterns like Compound Components, State Machines, and React Fiber internals.\" },\n      \"subPhase7\": { \"name\": \"Build Tools & Ecosystem\", \"description\": \"Understanding the tools that power React development (Webpack, Babel) and the wider ecosystem.\" }\n    }\n  }\n}\n```\n\n**Markdown Structure Plan (`readme`):**\n\n```markdown\n# ReactJS Learning Roadmap: Basic to Advanced\n\nThis roadmap provides a structured path for learning ReactJS, from the fundamental concepts to advanced topics and the surrounding ecosystem.\n\n## Phase 1: React Fundamentals\n\n*Goal: Grasp the core concepts required to build basic React applications.*\n\n1.  **Prerequisites:**\n    *   Solid understanding of HTML structure and semantics.\n    *   Proficiency in CSS for styling (including Flexbox/Grid).\n    *   Strong foundation in JavaScript (variables, data types, functions, objects, arrays, DOM manipulation).\n2.  **Modern JavaScript (ES6+):**\n    *   `let` and `const`\n    *   Arrow Functions\n    *   Template Literals\n    *   Destructuring (Objects and Arrays)\n    *   Modules (Import/Export)\n    *   Promises and `async/await`\n    *   Array methods (`.map`, `.filter`, `.reduce`, etc.)\n3.  **Introduction to React:**\n    *   What is React? (Library vs. Framework)\n    *   Key Features (Declarative UI, Component-Based, Virtual DOM)\n    *   Setting up a Development Environment (Node.js, npm/yarn, Create React App or Vite)\n4.  **JSX (JavaScript XML):**\n    *   Syntax and embedding expressions (`{}`)\n    *   Attributes (e.g., `className`, `htmlFor`)\n    *   Rendering elements with `ReactDOM.render` (or `createRoot` in React 18+)\n5.  **Components:**\n    *   Functional Components (Primary focus)\n    *   Class Components (Understanding for legacy code)\n    *   Composing Components\n6.  **Props:**\n    *   Passing data from parent to child components.\n    *   `props.children`\n    *   PropTypes (for type checking - optional but good practice)\n7.  **State:**\n    *   Managing component-specific data.\n    *   `useState` Hook: Initializing and updating state.\n    *   State updates are asynchronous.\n8.  **Handling Events:**\n    *   Attaching event handlers (e.g., `onClick`, `onChange`).\n    *   Passing event handlers as props.\n9.  **Conditional Rendering:**\n    *   Using `if` statements, ternary operators (`? :`), logical `&&` operator.\n10. **Lists and Keys:**\n    *   Rendering dynamic lists using `.map()`.\n    *   Importance of the `key` prop for performance and identity.\n11. **Basic Hooks Introduction:**\n    *   `useState`: Managing local component state.\n    *   `useEffect`: Handling side effects (data fetching, subscriptions, manual DOM manipulations). Understanding the dependency array.\n\n---\n\n## Phase 2: Intermediate React\n\n*Goal: Build more complex applications, manage state effectively, and interact with APIs.*\n\n1.  **Hooks Deep Dive:**\n    *   `useContext`: Avoiding prop drilling for global state.\n    *   `useReducer`: Managing complex state logic.\n    *   `useCallback`: Memoizing functions.\n    *   `useMemo`: Memoizing computed values.\n    *   `useRef`: Accessing DOM nodes or persisting values without re-renders.\n    *   Creating Custom Hooks: Reusing stateful logic.\n2.  **Forms:**\n    *   Controlled Components (State manages form input values).\n    *   Handling form submission.\n    *   Form validation basics.\n    *   (Optional: Uncontrolled Components using `useRef`).\n3.  **Styling Strategies:**\n    *   Plain CSS / CSS Modules\n    *   CSS-in-JS (Styled Components, Emotion)\n    *   Utility-First CSS (Tailwind CSS)\n    *   Choosing the right strategy.\n4.  **Client-Side Routing:**\n    *   React Router (`react-router-dom`): Setup, `<BrowserRouter>`, `<Routes>`, `<Route>`, `<Link>`, `<NavLink>`.\n    *   URL Parameters (`useParams`).\n    *   Nested Routes.\n    *   Programmatic Navigation (`useNavigate`).\n    *   Protected Routes.\n5.  **State Management Solutions:**\n    *   Context API Deep Dive (Limitations for high-frequency updates).\n    *   Redux & Redux Toolkit (Actions, Reducers, Store, `useSelector`, `useDispatch`). Recommended for complex state.\n    *   Alternatives (Zustand, Jotai, Recoil - understanding the landscape).\n6.  **Working with APIs:**\n    *   Fetching data (`fetch` API, Axios).\n    *   Handling loading and error states.\n    *   Using `useEffect` for data fetching.\n    *   Making authenticated requests.\n    *   (Optional: Libraries like React Query/SWR for caching, synchronization).\n7.  **Component Composition Patterns:**\n    *   Revisiting Custom Hooks as the primary pattern.\n    *   Understanding older patterns (Higher-Order Components - HOCs, Render Props) if encountered.\n8.  **Error Handling:**\n    *   Error Boundaries: Catching JavaScript errors in component trees.\n\n---\n\n## Phase 3: Advanced React & Ecosystem\n\n*Goal: Optimize applications, implement robust testing, and leverage the wider React ecosystem.*\n\n1.  **Performance Optimization:**\n    *   Memoization: `React.memo`, `useCallback`, `useMemo` revisited.\n    *   Code Splitting: `React.lazy` and `<Suspense>` for lazy loading components.\n    *   Virtual DOM: Deeper understanding of reconciliation.\n    *   Using the React DevTools Profiler to identify bottlenecks.\n    *   Windowing libraries (e.g., `react-window`) for large lists.\n2.  **Testing:**\n    *   Testing Pyramid concept.\n    *   Unit Testing: Jest & React Testing Library (RTL) - testing individual components in isolation.\n    *   Integration Testing: Testing interactions between multiple components (also with RTL).\n    *   (Optional: End-to-End Testing tools like Cypress or Playwright).\n3.  **Server-Side Rendering (SSR) & Static Site Generation (SSG):**\n    *   Concepts and benefits (SEO, Performance).\n    *   Introduction to frameworks: Next.js (App Router/Pages Router), Remix.\n    *   Data fetching in SSR/SSG contexts.\n4.  **Accessibility (a11y):**\n    *   Importance of semantic HTML.\n    *   ARIA attributes.\n    *   Keyboard navigation and focus management.\n    *   Using tools for accessibility testing.\n5.  **TypeScript with React:**\n    *   Benefits of static typing.\n    *   Typing props, state, hooks, event handlers.\n    *   Using utility types.\n    *   Configuring TypeScript for a React project.\n6.  **Advanced Patterns & Concepts:**\n    *   Compound Components Pattern.\n    *   State Machines (e.g., using XState) for complex UI logic.\n    *   React Fiber Architecture (Conceptual understanding).\n7.  **Build Tools & Ecosystem:**\n    *   Understanding Webpack and Babel (often abstracted by CRA/Vite).\n    *   Exploring the wider ecosystem (UI libraries like Material UI, Ant Design; Animation libraries; etc.).\n    *   Contributing to Open Source React projects.\n\nThis roadmap provides a comprehensive guide, but remember to build projects consistently at each stage to solidify your understanding. Good luck!\n```\n\nDouble check the requirements:\n- Output is a JSON object. Yes.\n- JSON object has \"readme\" and \"roadmapjson\" keys. Yes.\n- \"readme\" contains markdown. Yes.\n- \"roadmapjson\" contains structured JSON. Yes.\n- Roadmap is comprehensive, basic to advanced. Yes.\n- No extra text before or after the JSON object. Yes.\n- User prompt is correctly integrated (\"generate react notes from basic to advance\" -> roadmap for learning React). Yes."},
            {text: "```json\n{\n  \"readme\": \"# ReactJS Learning Roadmap: Basic to Advanced\\n\\nThis roadmap provides a structured path for learning ReactJS, from the fundamental concepts to advanced topics and the surrounding ecosystem.\\n\\n## Phase 1: React Fundamentals\\n\\n*Goal: Grasp the core concepts required to build basic React applications.*\\n\\n1.  **Prerequisites:**\\n    *   Solid understanding of HTML structure and semantics.\\n    *   Proficiency in CSS for styling (including Flexbox/Grid).\\n    *   Strong foundation in JavaScript (variables, data types, functions, objects, arrays, DOM manipulation).\\n2.  **Modern JavaScript (ES6+):**\\n    *   `let` and `const`\\n    *   Arrow Functions\\n    *   Template Literals\\n    *   Destructuring (Objects and Arrays)\\n    *   Modules (Import/Export)\\n    *   Promises and `async/await`\\n    *   Array methods (`.map`, `.filter`, `.reduce`, etc.)\\n3.  **Introduction to React:**\\n    *   What is React? (Library vs. Framework)\\n    *   Key Features (Declarative UI, Component-Based, Virtual DOM)\\n    *   Setting up a Development Environment (Node.js, npm/yarn, Create React App or Vite)\\n4.  **JSX (JavaScript XML):**\\n    *   Syntax and embedding expressions (`{}`)\\n    *   Attributes (e.g., `className`, `htmlFor`)\\n    *   Rendering elements with `ReactDOM.render` (or `createRoot` in React 18+)\\n5.  **Components:**\\n    *   Functional Components (Primary focus)\\n    *   Class Components (Understanding for legacy code)\\n    *   Composing Components\\n6.  **Props:**\\n    *   Passing data from parent to child components.\\n    *   `props.children`\\n    *   PropTypes (for type checking - optional but good practice)\\n7.  **State:**\\n    *   Managing component-specific data.\\n    *   `useState` Hook: Initializing and updating state.\\n    *   State updates are asynchronous.\\n8.  **Handling Events:**\\n    *   Attaching event handlers (e.g., `onClick`, `onChange`).\\n    *   Passing event handlers as props.\\n9.  **Conditional Rendering:**\\n    *   Using `if` statements, ternary operators (`? :`), logical `&&` operator.\\n10. **Lists and Keys:**\\n    *   Rendering dynamic lists using `.map()`.\\n    *   Importance of the `key` prop for performance and identity.\\n11. **Basic Hooks Introduction:**\\n    *   `useState`: Managing local component state.\\n    *   `useEffect`: Handling side effects (data fetching, subscriptions, manual DOM manipulations). Understanding the dependency array.\\n\\n---\\n\\n## Phase 2: Intermediate React\\n\\n*Goal: Build more complex applications, manage state effectively, and interact with APIs.*\\n\\n1.  **Hooks Deep Dive:**\\n    *   `useContext`: Avoiding prop drilling for global state.\\n    *   `useReducer`: Managing complex state logic.\\n    *   `useCallback`: Memoizing functions.\\n    *   `useMemo`: Memoizing computed values.\\n    *   `useRef`: Accessing DOM nodes or persisting values without re-renders.\\n    *   Creating Custom Hooks: Reusing stateful logic.\\n2.  **Forms:**\\n    *   Controlled Components (State manages form input values).\\n    *   Handling form submission.\\n    *   Form validation basics.\\n    *   (Optional: Uncontrolled Components using `useRef`).\\n3.  **Styling Strategies:**\\n    *   Plain CSS / CSS Modules\\n    *   CSS-in-JS (Styled Components, Emotion)\\n    *   Utility-First CSS (Tailwind CSS)\\n    *   Choosing the right strategy.\\n4.  **Client-Side Routing:**\\n    *   React Router (`react-router-dom`): Setup, `<BrowserRouter>`, `<Routes>`, `<Route>`, `<Link>`, `<NavLink>`.\\n    *   URL Parameters (`useParams`).\\n    *   Nested Routes.\\n    *   Programmatic Navigation (`useNavigate`).\\n    *   Protected Routes.\\n5.  **State Management Solutions:**\\n    *   Context API Deep Dive (Limitations for high-frequency updates).\\n    *   Redux & Redux Toolkit (Actions, Reducers, Store, `useSelector`, `useDispatch`). Recommended for complex state.\\n    *   Alternatives (Zustand, Jotai, Recoil - understanding the landscape).\\n6.  **Working with APIs:**\\n    *   Fetching data (`fetch` API, Axios).\\n    *   Handling loading and error states.\\n    *   Using `useEffect` for data fetching.\\n    *   Making authenticated requests.\\n    *   (Optional: Libraries like React Query/SWR for caching, synchronization).\\n7.  **Component Composition Patterns:**\\n    *   Revisiting Custom Hooks as the primary pattern.\\n    *   Understanding older patterns (Higher-Order Components - HOCs, Render Props) if encountered.\\n8.  **Error Handling:**\\n    *   Error Boundaries: Catching JavaScript errors in component trees.\\n\\n---\\n\\n## Phase 3: Advanced React & Ecosystem\\n\\n*Goal: Optimize applications, implement robust testing, and leverage the wider React ecosystem.*\\n\\n1.  **Performance Optimization:**\\n    *   Memoization: `React.memo`, `useCallback`, `useMemo` revisited.\\n    *   Code Splitting: `React.lazy` and `<Suspense>` for lazy loading components.\\n    *   Virtual DOM: Deeper understanding of reconciliation.\\n    *   Using the React DevTools Profiler to identify bottlenecks.\\n    *   Windowing libraries (e.g., `react-window`) for large lists.\\n2.  **Testing:**\\n    *   Testing Pyramid concept.\\n    *   Unit Testing: Jest & React Testing Library (RTL) - testing individual components in isolation.\\n    *   Integration Testing: Testing interactions between multiple components (also with RTL).\\n    *   (Optional: End-to-End Testing tools like Cypress or Playwright).\\n3.  **Server-Side Rendering (SSR) & Static Site Generation (SSG):**\\n    *   Concepts and benefits (SEO, Performance).\\n    *   Introduction to frameworks: Next.js (App Router/Pages Router), Remix.\\n    *   Data fetching in SSR/SSG contexts.\\n4.  **Accessibility (a11y):**\\n    *   Importance of semantic HTML.\\n    *   ARIA attributes.\\n    *   Keyboard navigation and focus management.\\n    *   Using tools for accessibility testing.\\n5.  **TypeScript with React:**\\n    *   Benefits of static typing.\\n    *   Typing props, state, hooks, event handlers.\\n    *   Using utility types.\\n    *   Configuring TypeScript for a React project.\\n6.  **Advanced Patterns & Concepts:**\\n    *   Compound Components Pattern.\\n    *   State Machines (e.g., using XState) for complex UI logic.\\n    *   React Fiber Architecture (Conceptual understanding).\\n7.  **Build Tools & Ecosystem:**\\n    *   Understanding Webpack and Babel (often abstracted by CRA/Vite).\\n    *   Exploring the wider ecosystem (UI libraries like Material UI, Ant Design; Animation libraries; etc.).\\n    *   Contributing to Open Source React projects.\\n\\nThis roadmap provides a comprehensive guide, but remember to build projects consistently at each stage to solidify your understanding. Good luck!\",\n  \"roadmapjson\": {\n    \"phase1\": {\n      \"name\": \"React Fundamentals\",\n      \"description\": \"Core concepts required to start building with React.\",\n      \"subPhases\": {\n        \"subPhase1\": {\n          \"name\": \"Prerequisites\",\n          \"description\": \"Essential web development basics: Solid HTML, CSS (including Flexbox/Grid), and fundamental JavaScript (variables, types, functions, objects, arrays, DOM).\"\n        },\n        \"subPhase2\": {\n          \"name\": \"Modern JavaScript (ES6+)\",\n          \"description\": \"Key JavaScript features used heavily in React: let/const, Arrow Functions, Template Literals, Destructuring, Modules (Import/Export), Promises, async/await, Array methods (.map, .filter, etc.).\"\n        },\n        \"subPhase3\": {\n          \"name\": \"Introduction to React\",\n          \"description\": \"What React is (Library vs. Framework), its core philosophy (Declarative UI, Component-Based), setting up the environment (Node.js, npm/yarn, Create React App/Vite).\"\n        },\n        \"subPhase4\": {\n          \"name\": \"JSX\",\n          \"description\": \"Understanding JavaScript XML syntax: Embedding expressions ({}), attributes (className, htmlFor), self-closing tags, basic rendering with ReactDOM.\"\n        },\n        \"subPhase5\": {\n          \"name\": \"Components\",\n          \"description\": \"Building reusable UI pieces: Functional Components (primary focus), Class Components (for context), component composition.\"\n        },\n        \"subPhase6\": {\n          \"name\": \"Props\",\n          \"description\": \"Passing data down the component tree: Defining and accessing props, props.children, basic prop type validation (PropTypes or TypeScript).\"\n        },\n        \"subPhase7\": {\n          \"name\": \"State\",\n          \"description\": \"Managing component-local data that changes over time: The useState hook, initializing state, updating state, understanding asynchronous state updates.\"\n        },\n        \"subPhase8\": {\n          \"name\": \"Handling Events\",\n          \"description\": \"Making components interactive: Attaching event listeners (onClick, onChange, onSubmit), event handler functions, passing handlers via props.\"\n        },\n        \"subPhase9\": {\n          \"name\": \"Conditional Rendering\",\n          \"description\": \"Displaying UI based on conditions: Using if statements, ternary operators, logical AND (&&) operator for inline conditions.\"\n        },\n        \"subPhase10\": {\n          \"name\": \"Lists and Keys\",\n          \"description\": \"Rendering dynamic collections of elements: Using the .map() array method, the importance of the 'key' prop for list item identity and performance.\"\n        },\n        \"subPhase11\": {\n          \"name\": \"Basic Hooks Introduction\",\n          \"description\": \"Getting started with React Hooks: Revisiting useState for state management and introducing useEffect for handling side effects (like API calls after render), understanding the dependency array.\"\n        }\n      }\n    },\n    \"phase2\": {\n      \"name\": \"Intermediate React\",\n      \"description\": \"Deeper dive into React's capabilities and common patterns for building more complex applications.\",\n      \"subPhases\": {\n        \"subPhase1\": {\n          \"name\": \"Hooks Deep Dive\",\n          \"description\": \"Mastering various built-in hooks: useContext (global state), useReducer (complex state logic), useCallback (memoizing functions), useMemo (memoizing values), useRef (DOM access/persistent values). Creating custom hooks for reusable logic.\"\n        },\n        \"subPhase2\": {\n          \"name\": \"Forms in React\",\n          \"description\": \"Handling user input effectively: Controlled components (state drives the form), handling form submission, basic input validation patterns, introduction to uncontrolled components.\"\n        },\n        \"subPhase3\": {\n          \"name\": \"Styling Strategies\",\n          \"description\": \"Exploring different ways to style React components: CSS Modules (scoped CSS), CSS-in-JS libraries (Styled Components, Emotion), Utility-First frameworks (Tailwind CSS), choosing appropriate methods.\"\n        },\n        \"subPhase4\": {\n          \"name\": \"Client-Side Routing\",\n          \"description\": \"Implementing navigation within a Single Page Application (SPA): Using React Router (BrowserRouter, Routes, Route, Link, NavLink), handling URL parameters (useParams), nested routing, programmatic navigation (useNavigate), protecting routes.\"\n        },\n        \"subPhase5\": {\n          \"name\": \"State Management Solutions\",\n          \"description\": \"Managing application-wide state beyond component state/props: Context API limitations, dedicated libraries like Redux (with Redux Toolkit for simplification - actions, reducers, store, selectors), and alternatives (Zustand, Jotai).\"\n        },\n        \"subPhase6\": {\n          \"name\": \"Working with APIs\",\n          \"description\": \"Fetching and handling data from external sources: Using Fetch API or libraries like Axios, managing loading and error states during requests, using useEffect for data fetching, handling authenticated requests, introduction to data fetching libraries (React Query, SWR).\"\n        },\n        \"subPhase7\": {\n          \"name\": \"Component Composition\",\n          \"description\": \"Advanced patterns for structuring components: Favoring Custom Hooks, understanding legacy patterns like Higher-Order Components (HOCs) and Render Props for compatibility.\"\n        },\n        \"subPhase8\": {\n          \"name\": \"Error Handling\",\n          \"description\": \"Gracefully managing runtime errors in the UI: Implementing Error Boundaries to catch rendering errors in component subtrees and display fallback UI.\"\n        }\n      }\n    },\n    \"phase3\": {\n      \"name\": \"Advanced React & Ecosystem\",\n      \"description\": \"Optimizing performance, ensuring robustness through testing, and exploring the broader React ecosystem and advanced concepts.\",\n      \"subPhases\": {\n        \"subPhase1\": {\n          \"name\": \"Performance Optimization\",\n          \"description\": \"Techniques to make React applications faster: Memoization (React.memo, useCallback, useMemo), Code Splitting (React.lazy, Suspense), understanding Virtual DOM reconciliation, profiling with React DevTools, optimizing large lists (windowing).\"\n        },\n        \"subPhase2\": {\n          \"name\": \"Testing React Applications\",\n          \"description\": \"Ensuring code quality and reliability: Unit testing components (Jest, React Testing Library - RTL), integration testing component interactions (RTL), understanding the testing pyramid, introduction to End-to-End testing (Cypress, Playwright).\"\n        },\n        \"subPhase3\": {\n          \"name\": \"SSR & SSG Frameworks\",\n          \"description\": \"Exploring beyond client-side rendering: Understanding Server-Side Rendering (SSR) and Static Site Generation (SSG) concepts and benefits (SEO, performance), introduction to frameworks like Next.js and Remix.\"\n        },\n        \"subPhase4\": {\n          \"name\": \"Accessibility (a11y)\",\n          \"description\": \"Building inclusive applications: Importance of semantic HTML, using ARIA attributes correctly, managing keyboard navigation and focus, accessibility testing tools.\"\n        },\n        \"subPhase5\": {\n          \"name\": \"TypeScript with React\",\n          \"description\": \"Adding static typing for improved development experience and robustness: Typing props, state, hooks, event handlers, leveraging utility types, configuring TS in a React project.\"\n        },\n        \"subPhase6\": {\n          \"name\": \"Advanced Patterns & Concepts\",\n          \"description\": \"Exploring sophisticated techniques: Compound Components pattern for flexible APIs, State Machines (e.g., XState) for managing complex UI states, conceptual understanding of React Fiber (reconciliation algorithm).\"\n        },\n        \"subPhase7\": {\n          \"name\": \"Build Tools & Ecosystem\",\n          \"description\": \"Understanding the tools that power React development: Basics of module bundlers (Webpack) and transpilers (Babel) often abstracted by tools like CRA/Vite, exploring the wider ecosystem (UI libraries, animation, etc.).\"\n        }\n      }\n    }\n  }\n}\n```"},
          ],
        },
      ],
    });

    const result = await chatSession.sendMessage(systemPrompt + "\n\n" + userPrompt);

    let rawText = result.response.text();

    // Remove ```json, ``` and any other ```lang-style code blocks
    rawText = rawText.replace(/```[a-z]*\n?/gi, "").replace(/```/g, "").trim();

    return NextResponse.json({ response: rawText });
  } catch (error) {
    console.error("Gemini API Error:", error);
    return NextResponse.json({ error: "Failed to generate response" }, { status: 500 });
  }
}
